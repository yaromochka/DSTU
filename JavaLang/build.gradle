plugins {
  id 'java'
  id 'application'
  id 'org.javamodularity.moduleplugin' version '1.8.12'
  id 'org.openjfx.javafxplugin' version '0.0.13'
  id 'org.beryx.jlink' version '2.25.0'
}

group 'com.example'
version '1.0-SNAPSHOT'

repositories {
  mavenCentral()
}

ext {
  junitVersion = '5.10.0'
}

// sourceCompatibility = '21'
// targetCompatibility = '21'

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

application {
  mainClass = 'programmingLanguages.laboratories.GUI.Main'
}

javafx {
  version = '21.0.2'
  modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {

  testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
  testImplementation(platform("org.junit:junit-bom:5.9.1"))
  testImplementation("org.junit.jupiter:junit-jupiter")
  implementation("org.apache.commons:commons-math3:3.6.1")
  // https://mavenlibs.com/maven/dependency/com.xiantrimble.combinatorics/combinatorics
  implementation("com.xiantrimble.combinatorics:combinatorics:0.2.0")
  implementation("com.google.guava:guava:32.0.0-android")
  // https://mavenlibs.com/maven/dependency/com.googlecode.combinatoricslib/combinatoricslib
  implementation("com.github.dpaukov:combinatoricslib3:3.3.3")
  // https://mavenlibs.com/maven/dependency/com.ibm.icu/icu4j
  implementation("com.ibm.icu:icu4j:73.2")
  // https://mvnrepository.com/artifact/org.apache.commons/commons-collections4
  implementation("org.apache.commons:commons-collections4:4.3")
  implementation("org.jetbrains:annotations:16.0.2")
  implementation("com.googlecode.json-simple:json-simple:1.1.1")
  implementation("com.github.javafaker:javafaker:1.0.2")
  // https://mvnrepository.com/artifact/com.dlsc/GMapsFX
  implementation("com.sothawo:mapjfx:3.1.0")
  implementation("ch.qos.logback:logback-classic:1.2.3")
  implementation("org.apache.poi:poi-ooxml:5.2.5")
  implementation("org.xerial:sqlite-jdbc:3.42.0.1")
}

test {
  useJUnitPlatform()
}

jlink {
  imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
  options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
  launcher {
    name = 'app'
  }
}

jlinkZip {
  group = 'distribution'
}